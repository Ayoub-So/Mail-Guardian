
#__________________________________________________________
from joblib import load
from extract import extract_infos
import pandas as pd
# Importing the dataset
dataset = pd.read_csv('data.csv', sep = '|')
X = dataset.drop(['Name', 'md5', 'legitimate'], axis = 1).values
y = dataset['legitimate'].values
# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)
#Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)

#--------------------------
classifier = load("malware_detection_classifier.joblib")
def check_malware(path: str):
    x_data = extract_infos(path)
    standard_feature = sc.transform([x_data[2:]])
    result = classifier.predict(standard_feature)
    print(result)
    if result[0] == 1:
        return 'benign'
    return 'malware'

def check_malware2(path:str):
    x_data = extract_infos(path)
    standard_feature = sc.transform([x_data[2:]])
    result = classifier.predict_proba(standard_feature)
    if(result[0][0] > 0.5):
        return f"Safe ({result[0][0] * 100}%)"
    else:
        return f"Malware not safe ({result[0][1] * 100}%)"

# here you can implement API call to retrieve the email input from Chrome extension---------------------
from flask import Flask, request, jsonify
from flask_cors import CORS
from werkzeug.utils import secure_filename
import os
import uuid
app = Flask(__name__)
CORS(app)

# Define a route to handle incoming data
@app.route('/malware_detection', methods=['POST'])
def receive_data():
    if request.files.get("file") is None:
        return jsonify({'status': 'error'})
    f = request.files["file"]
    output_name  = "uploads/" +uuid.uuid4().hex + os.path.splitext(f.filename)[1]             #secure_filename(f.filename)
    f.save(output_name)
    f.close()
    print("Got : "+ output_name )


    result = check_malware2(output_name)
    #os.remove(output_name)
    print("deleted file  " + output_name)
    return jsonify({'status': 'success', 'result': result})   #send response here

if __name__ == '__main__':
    # Run the Flask app, listening on port 5000 by default
    app.run(debug=True, port=5001)


#--------------------------------
